#!/bin/bash
# Exercise 1
#1. List all Docker networks.
docker network ls
#2. Inspect the default bridge network. 
docker network inspect bridge
#3. Create a new bridge user-defined network. 
docker network create mynetwork
#4. Run a container attached to it and inspect its IP
docker network connect mynetwork strange_goodall

#Exercise 2
#1. Run two Nginx containers which have to be connected to that user-defined network created in Exercise 1. 
docker run nginx
docker run nginx
docker network connect mynetwork ecstatic_mendel
docker network connect mynetwork stoic_khayam
#2. Use ping within both containers to test communication each other by container name.
docker exec -it ecstatic_mendel bash
apt update 
apt install iputils-ping
ping 172.0.18.3
exit
docker exec -t stoic_khayan
apt install iputils-ping
ping 172.0.18.2
exit

#Exercise 3
#1. Create a Docker volume: mydata
docker volume create mydata
#2. Run a container using the volume. 
docker run --rm -it -v mydata:/data ubuntu
cd data
ls
#3. Write a file inside /data from the container, then: 
touch prueba.txt
#3.1. Stop the container. 
exit
#3.2. Relaunch to verify persistence.
docker run --rm -it -v mydata:/data ubuntu
ls /data
exit

#Exercise 4
#1. Create a directory on your host. 
mkdir mydirectory
#2. Run a container with a bind mount. 
docker run --rm -it -v ~/mydirectory:/mnt ubuntu bash
#3. Create a file in /mnt from the container and check the host.
cd /mnt
touch test.txt
exit 
ls mydirectory

#Exercise 5
#1. Create a file in a named volume. 
docker volume create myvolume
docker run --rm -t -v myvolume:/data ubuntu
cd /data/
touch myvolume.txt
exit
#2. Create a file using a bind mount. 
docker run --rm -it -v ~/data:/data ubuntu
cd /data
touch mybindmount.txt
exit
#3. Observe where data is stored on the host with docker volume inspect and ls.
docker volume inspect myvolume
ls data

#Exercise 6
#1. Run an Ubuntu container with the necessary options to enable Docker in Docker (DinD). 
docker run --name dind -d --privileged docker:dind
#2. Exec into the container and run docker version.
docker exec -it dind sh
docker version
#Exercise 7
#1. Run a container with memory and CPU limits: 
#Memory = 256m 
#CPU = 0.5 
docker run -it --name limited -m 256m --cpus=0.5 nginx
#2. Check resource usage stats. 
docker container stats
#3. Check disk usage (docker system).
docker system df

#Exercise 8
#1. Run a container with policy --restart on-failure. 
docker run -d --name testfailure --restart on-failure:10 alpine sh -c "exit 1"
#2. Kill the container and observe how it restarts 
watch docker ps
#3. Try with the policy --restart unless-stopped 
docker run --name traefik-test2 --restart unless-stopped -d traefik
#4. Reboot the system and see what happens.
sudo systemctl restart docker.socket

#Exercise 9
#1. Create a network dbnet. 
docker network create dbnet
#2. Create a volume dbdata.
docker volume create dbdata
#3. Run a MariaDB container with the following requirements: 
#3.1. Attached to volume dbdata.
docker run --name mariadb01 -v dbdata:/var/lib/mysql -e MARIADB_ROOT_PASSWORD=root -d mariadb:latest
#3.2. Attached to network dbnet.
docker network connect dbnet mariadb01
#3.3. Do NOT expose ANY port.

#Exercise 10
#1. Run a PHPMyAdmin container with the following requirements: 
#2. Use a bind mount to persist the web app configuration.
#3. Linked to the previous MariaDB container (created in Exercise 9)
docker run --name phpmyadmin -v ~mydirectory -d --link mariadb01:db -p 3306:80 phpmyadmin
#1. Attached to network dbnet (created in Exercise 9).
docker network connect dbnet phpmyadmin
4. Open a browser to display the PHPMyAdmin Login Form.
http://10.26.32.148:3306/
5. Login with the DB credentials.
root
root
